#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2014 Osiris Alejandro Gomez <osiux@osiux.com.ar>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

DIR="$PWD"
LEVEL=1
EXCLUDE='^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{4}-[0-9a-z]{6}.jpg'

while getopts "d:l:" OPTION
do
  case $OPTION in
    d)
      DIR="$OPTARG"
      ;;
    l)
      LEVEL=$OPTARG
      ;;
  esac
done

[ ! -d "$DIR" ] && exit 1

# verify LEVEL is a number?
if [[ ! $LEVEL =~ ^[0-9]+$ ]]
then
  echo ERROR invalid level: $LEVEL
  exit 1
fi

cd "$DIR"

FIND="find -maxdepth $LEVEL -type f -iname "

$FIND '*.jp*g' | cut -c 3- | egrep -v $EXCLUDE | while read i
do
  FILE=$(basename "$i")

  file "$i" | grep -o JPEG | awk '{print $1}' | head -1 >.f.tmp
  JPEG=$(cat .f.tmp && rm .f.tmp)

  if [ "$JPEG" = "JPEG" ]
  then
    MD5=$(md5sum "$i" | cut -c -32)
    HASH=$(echo $MD5 | cut -c -6)

    if [ -e $HASH.jpg ]
    then
      MD5_HASH=$(md5sum $HASH.jpg | cut -c -32)
      if [ "$MD5" = "$MD5_HASH" ]
      then 
        if [ ! "$FILE" = "$HASH.jpg" ]
        then
         echo "duplicate file: " $HASH.jpg
        fi
      else
        echo "duplicate filename: " $HASH.jpg
      fi
    else
      mv -vi "$i" $HASH.jpg
    fi

    identify $HASH.jpg >/dev/null 2>/dev/null
    OK=$(echo $?)

    if [ $OK -gt 0 ]
    then
      echo "invalid JPEG" $HASH.jpg
      mv -vi $HASH.jpg $HASH.dat
      continue
    fi

    NOW_YY=$(date +%Y)
    NOW_MM=$(date +%m)
    NOW_DD=$(date +%d)
    NOW_HO=$(date +%H)
    NOW_MI=$(date +%M)
    NOW_SS=$(date +%S)

    FILE_DATE=$(jhead $HASH.jpg | grep "File date")
    FILE_YY=$(echo $FILE_DATE | cut -d: -f2 | tr -d ' ')
    FILE_MM=$(echo $FILE_DATE | cut -d: -f3 | tr -d ' ')
    FILE_DD=$(echo $FILE_DATE | cut -d: -f4 | cut -d' ' -f1)
    FILE_HO=$(echo $FILE_DATE | cut -d: -f4 | cut -d' ' -f2)
    FILE_MI=$(echo $FILE_DATE | cut -d: -f4 | cut -d' ' -f5)
    FILE_SS=$(echo $FILE_DATE | cut -d: -f4 | cut -d' ' -f6)

    [[ $FILE_YY =~ [0-9]{2} ]] && YY=$FILE_YY || YY=$NOW_YY
    [[ $FILE_MM =~ [0-9]{2} ]] && MM=$FILE_MM || MM=$NOW_MM
    [[ $FILE_DD =~ [0-9]{2} ]] && DD=$FILE_DD || DD=$NOW_DD
    [[ $FILE_HO =~ [0-9]{2} ]] && HO=$FILE_HO || HO=$NOW_HO
    [[ $FILE_MI =~ [0-9]{2} ]] && MI=$FILE_MI || MI=$NOW_MI
    [[ $FILE_SS =~ [0-9]{2} ]] && SS=$FILE_SS || SS=$NOW_SS

    DATE_FIX=$YY:$MM:$DD
    TIME_FIX=$HO:$MI:$SS
    DATE_EXIF=$(jhead $HASH.jpg | grep "Date/Time" | awk '{print $3}' | egrep -o "[0-9]{4}:[0-9]{2}:[0-9]{2}")

    if [ -z "$DATE_EXIF" ]
    then
      echo "create minimal exif in file: $HASH.jpg"
      jhead -mkexif -ds$DATE_FIX $HASH.jpg >/dev/null
    fi

    if [ "$DATE_EXIF" = "0000:00:00" ]
    then
      echo "fix exif timestamp in file: $HASH.jpg with: $DATE_FIX" 
      jhead -ds$DATE_FIX $HASH.jpg
      OK=$(echo $?)
      if [ $OK -eq 0 ]
      then
        jhead -exonly -ft "$HASH.jpg"
        DATE_TOUCH=${YY}${MM}${DD}${HO}${MI}
        touch -m -t $DATE_TOUCH "$HASH.jpg"
      fi
    fi

    jhead -exonly -n%Y-%m-%d-%H%M-%f "$HASH.jpg"

  else
    echo "invalid JPEG: " "$i"
    if [ ! -e "$i.dat" ]
    then
      mv -v "$i" "$i.dat"
    fi
  fi
done


